<!doctype html>
<html class="no-js" lang="{{ request.locale.iso_code }}">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0">
    <meta name="theme-color" content="{{ settings.accent_color }}">

    <title>
      {% if page_title == blank %}
        {{ shop.name }}
      {% else %}
        {{ page_title }}{% if current_page != 1 %} â€“ {{ 'general.meta.page' | t: page: current_page }}{% endif %}
      {% endif %}
    </title>

    {% if page_description %}
      <meta name="description" content="{{ page_description | escape }}">
    {% endif %}

    <link rel="canonical" href="{{ canonical_url }}">

    {% if settings.favicon %}
      <link rel="icon" href="{{ settings.favicon | img_url: '96x96' }}" type="image/png">
    {% endif %}

    {%- comment -%} Performance preloads and preconnects {%- endcomment -%}
    <link rel="preload" as="style" href="{{ 'theme.css' | asset_url }}">
    <link rel="preload" as="script" href="{{ 'theme.js' | asset_url }}">
    <link rel="preconnect" href="https://cdn.shopify.com">
    <link rel="preconnect" href="https://fonts.shopifycdn.com">
    <link rel="dns-prefetch" href="https://productreviews.shopifycdn.com">
    <link rel="dns-prefetch" href="https://ajax.googleapis.com">
    <link rel="dns-prefetch" href="https://maps.googleapis.com">
    <link rel="dns-prefetch" href="https://maps.gstatic.com">

    {% render 'social-meta-tags' %}
    {% render 'css-variables' %}
    {{ content_for_header }}

    <link rel="stylesheet" href="{{ 'theme.css' | asset_url }}">
    {% render 'microdata-schema' %}

    <script>
      // Expose global variables
      window.theme = {
        pageType: {{ request.page_type | json }},
        cartCount: {{ cart.item_count | json }},
        moneyFormat: {{ shop.money_format | json }},
        moneyWithCurrencyFormat: {{ shop.money_with_currency_format | json }},
        currencyCodeEnabled: {{ settings.currency_code_enabled | json }},
        showDiscount: {{ settings.show_discount | json }},
        discountMode: {{ settings.discount_mode | json }},
        cartType: {{ settings.cart_type | json }}
      };

      window.routes = {
        rootUrl: {{ routes.root_url | json }},
        rootUrlWithoutSlash: {% if routes.root_url == '/' %}''{% else %}{{ routes.root_url | json }}{% endif %},
        cartUrl: {{ routes.cart_url | json }},
        cartAddUrl: {{ routes.cart_add_url | json }},
        cartChangeUrl: {{ routes.cart_change_url | json }},
        searchUrl: {{ routes.search_url | json }},
        productRecommendationsUrl: {{ routes.product_recommendations_url | json }}
      };

      window.languages = {
        productRegularPrice: {{ 'product.general.regular_price' | t | json }},
        productSalePrice: {{ 'product.general.sale_price' | t | json }},
        collectionOnSaleLabel: {{ 'collection.product.discount_html' | t | json }},
        productFormUnavailable: {{ 'product.form.unavailable' | t | json }},
        productFormAddToCart: {{ 'product.form.add_to_cart' | t | json }},
        productFormPreOrder: {{ 'product.form.pre_order' | t | json }},
        productFormSoldOut: {{ 'product.form.sold_out' | t | json }},
        productAdded: {{ 'product.form.added' | t | json }},
        productAddedShort: {{ 'product.form.added_short' | t | json }},
        shippingEstimatorNoResults: {{ 'cart.shipping_estimator.no_results_title' | t | json }},
        shippingEstimatorOneResult: {{ 'cart.shipping_estimator.one_result_title' | t | json }},
        shippingEstimatorMultipleResults: {{ 'cart.shipping_estimator.multiple_results_title' | t | json }},
        shippingEstimatorErrors: {{ 'cart.shipping_estimator.errors' | t | json }}
      };

      document.documentElement.className = document.documentElement.className.replace('no-js', 'js');
    </script>

    {% if request.page_type == 'customers/addresses' %}
      <script src="{{ 'shopify_common.js' | shopify_asset_url }}" defer></script>
      <script src="{{ 'customer_area.js' | shopify_asset_url }}" defer></script>
    {% endif %}

    <script src="{{ 'theme.js' | asset_url }}" defer></script>
    <script src="{{ 'custom.js' | asset_url }}" defer></script>

    {% if request.page_type != 'cart' %}
      <script>
        (function () {
          window.onpageshow = function() {
            // Refresh cart content on back/forward navigation
            document.documentElement.dispatchEvent(new CustomEvent('cart:refresh', {
              bubbles: true,
              detail: { scrollToTop: false }
            }));
          };
        })();
      </script>
    {% endif %}
  </head>

  <body class="warehouse--v4 {% if settings.animation_image_zoom %}features--animate-zoom{% endif %} template-{{ request.page_type | handle }} {% if request.page_type contains '/' %}template-{{ request.page_type | split: '/' | last | handle }}{% endif %}" data-instant-intensity="viewport">
    
    {%- comment -%} Common SVG definitions {%- endcomment -%}
    <svg class="visually-hidden">
      <linearGradient id="rating-star-gradient-half">
        <stop offset="50%" stop-color="var(--product-review-star-color)" />
        <stop offset="50%" stop-color="rgba(var(--text-color-rgb), .4)" stop-opacity="0.4" />
      </linearGradient>
    </svg>

    <a href="#main" class="visually-hidden skip-to-content">{{ 'general.accessibility.skip_to_content' | t }}</a>
    <span class="loading-bar"></span>

    {% sections 'header-group' %}
    {% sections 'overlay-group' %}

    <main id="main" role="main">
      {{ content_for_layout }}
    </main>

    {% sections 'footer-group' %}

    <ul hidden>
      <li id="a11y-new-window-message">{{ 'general.accessibility.new_window' | t }}</li>
    </ul>
  </body>
</html>

<script> 
  document.addEventListener("DOMContentLoaded", () => { 
    const shadowHost = document.querySelector("delivery-promise-wc"); 

    if (!shadowHost) return; 

    const stylePromiseBox = () => { 
      if (shadowHost.shadowRoot) { 
        const promiseBox = shadowHost.shadowRoot.querySelector(".PromiseShell__Promise"); 
        if (promiseBox) { 
          // Background for the promise container
          promiseBox.style.backgroundColor = "#000000b3"; 
          promiseBox.style.color = "#fff"; 

          // Also style the input inside it
          const postalInput = promiseBox.querySelector("#postal-code__input");
          if (postalInput) {
            // postalInput.style.backgroundColor = "#000";   // black background
            postalInput.style.color = "#000";             // white text
          }
        } 
      } 
    }; 

    stylePromiseBox(); 

    const observer = new MutationObserver(() => { 
      stylePromiseBox(); 
    }); 

    if (shadowHost.shadowRoot) { 
      observer.observe(shadowHost.shadowRoot, { 
        childList: true, 
        subtree: true 
      }); 
    } 
  }); 
</script>
 